{{>partial_header}}
package throttle_test

import (
	"context"
	"errors"
	"net/http"
	"net/http/httptest"
	"testing"

	"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/throttle"
)

// Basic handler to return a successful response.
func OK(w http.ResponseWriter, r *http.Request) { w.WriteHeader(http.StatusOK) }

func TestTransport(t *testing.T) {
	t.Run("returns from a request when the throttling constraints are not met", func(t *testing.T) {
		srv := httptest.NewServer(http.HandlerFunc(OK))
		defer srv.Close()

		client := &http.Client{
			Transport: throttle.NewWithDefaultTransport(throttle.LimiterFunc(func(ctx context.Context) error {
				return nil
			})),
		}

		_, err := client.Get(srv.URL)
		if err != nil {
			t.Errorf("expected: no error, got: %+v", err)
		}
	})

	t.Run("returns an error when the throttling constaints are met", func(t *testing.T) {
		srv := httptest.NewServer(http.HandlerFunc(OK))
		defer srv.Close()

		client := &http.Client{
			Transport: throttle.NewWithDefaultTransport(throttle.LimiterFunc(func(ctx context.Context) error {
				return errors.New("something went wrong")
			})),
		}

		_, err := client.Get(srv.URL)
		if err == nil {
			t.Error("expected: error, got <nil>")
		}
	})
}

func TestGroup(t *testing.T) {
	t.Run("returns nil when there are no errors returned from any nested limiters", func(t *testing.T) {
		l := throttle.NewGroup(
			throttle.LimiterFunc(func(ctx context.Context) error {
				return nil
			}),
			throttle.LimiterFunc(func(ctx context.Context) error {
				return nil
			}),
		)

		if err := l.Wait(context.Background()); err != nil {
			t.Errorf("expected: no error, got: %+v", err)
		}
	})

	t.Run("returns an error if any of the nested limiters returns an error", func(t *testing.T) {
		l := throttle.NewGroup(
			throttle.LimiterFunc(func(ctx context.Context) error {
				return nil
			}),
			throttle.LimiterFunc(func(ctx context.Context) error {
				return errors.New("something went wrong")
			}),
			throttle.LimiterFunc(func(ctx context.Context) error {
				return nil
			}),
		)

		if err := l.Wait(context.Background()); err == nil {
			t.Error("expected: error, got: <nil>")
		}
	})
}
